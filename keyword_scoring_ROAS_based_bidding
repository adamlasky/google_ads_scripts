// Copyright 2024. Adam Lasky. All Rights Reserved.
// Keyword Scoring Script Based on ROAS
// Have custom requests? Email me at adam@adamlasky.me
//
// v.1
//
//
// ABOUT THE SCRIPT
// This script fetches keyword performance by clicks, conversions, cost, and ROAS
// then categorizes the keywords based on their relative performance as: 'over-performing', 'cash-burner', 'under-performing', and 'not enough data'
// and recommends actions to be taken per keyword.
// 
// IMPORTANT NOTES
// Create a Google Sheet and insert the URL in the Customization Section below
// Customize the roasHigh, roasLow, clicksMinimum, conversionsMinimum, and costMaximum thresholds to determine performance labels

// ---- Customization Section ----
var SPREADSHEET_URL = 'insert Google Sheet URL here'; // Update with your actual Google Sheet URL

var SETTINGS = {
  campaignNameContains: "insert campaign name here", // Specify part of the campaign name to include
  thresholds: { // Customizable thresholds for performance evaluation
    roasHigh: 500, // ROAS above this value is considered over-performing
    roasLow: 200, // ROAS below this value may be considered under-performing
    clicksMinimum: 50,
    conversionsMinimum: 10,
    costMaximum: 1000 // Cost that should not be exceeded unless ROAS is also high
  }
};

// Start script, don't add anything below this line
////////////////////////////////////////////////////////////////////

function main() {
  var spreadsheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
  var sheet = getOrCreateSheet(spreadsheet, 'Keyword Performance');

  var headers = ['Campaign Name', 'Keyword', 'Match Type', 'Clicks', 'Cost', 'Conversions', 'Conversion Value', 'ROAS', 'Performance Label', 'Suggested Action'];
  clearAndSetHeaders(sheet, headers);

  processKeywords(sheet);
}

function getOrCreateSheet(spreadsheet, sheetName) {
  var sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
  } else {
    sheet.clear(); // Clear existing content
  }
  return sheet;
}

function clearAndSetHeaders(sheet, headers) {
  sheet.clear(); // Clear any existing content
  sheet.appendRow(headers); // Set new headers
}

function processKeywords(sheet) {
  var campaignIterator = AdsApp.campaigns()
    .withCondition('Name CONTAINS_IGNORE_CASE "' + SETTINGS.campaignNameContains + '"')
    .withCondition("Status = ENABLED")
    .get();

  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var campaignName = campaign.getName();

    var keywordIterator = campaign.keywords()
      .withCondition("Status = ENABLED")
      .get();

    while (keywordIterator.hasNext()) {
      var keyword = keywordIterator.next();
      var stats = keyword.getStatsFor("LAST_30_DAYS");
      var clicks = parseInt(stats.getClicks(), 10);
      var cost = parseFloat(stats.getCost());
      var conversions = parseInt(stats.getConversions(), 10);
      var conversionValue = parseFloat(stats.getConversionValue());
      var roas = conversionValue / cost * 100; // ROAS calculation as a percentage
      var performanceLabel = getPerformanceLabel(clicks, cost, conversions, conversionValue, roas);
      var suggestedAction = getSuggestedAction(performanceLabel); // Retrieve suggested action based on performance label

      var dataRow = [
        campaignName, keyword.getText(), keyword.getMatchType(), clicks, cost.toFixed(2),
        conversions, conversionValue.toFixed(2), roas.toFixed(2), performanceLabel, suggestedAction
      ];
      sheet.appendRow(dataRow);
    }
  }
}

function getPerformanceLabel(clicks, cost, conversions, conversionValue, roas) {
  var t = SETTINGS.thresholds;
  
  if (roas > t.roasHigh) {
    return 'Over-performing';
  } else if (roas < t.roasLow) {
    return 'Cash-burner';
  } else if (cost > t.costMaximum && conversions < t.conversionsMinimum) {
    return 'Under-performing';
  }
  return 'Not enough data'; // Default case for all other conditions
}

function getSuggestedAction(performanceLabel) {
  switch(performanceLabel) {
    case 'Over-performing':
      return "Expand keywords based on current success patterns, tailor ad copy to enhance alignment with search intent, optimize landing pages to improve conversion rates further, experiment with different ad formats like Responsive Search Ads, implement or enhance RLSA strategies.";
    case 'Under-performing':
      return "Reduce bids or pause under-performing keywords, pause or remove non-performing keywords, adjust match types to prevent low-quality matches, redesign landing pages if conversion rates are low, reevaluate keyword groupings within ad groups.";
    case 'Cash-burner':
      return "Pause cash-burning keywords.";
    default:
      return "Continue to monitor and optimize.";
  }
}
