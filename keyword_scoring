// Copyright 2024. Adam Lasky. All Rights Reserved.
// Keyword Scoring Script
// Have custom requests? Email me at adam@adamlasky.me
//
// v2 
//
// -- Make sure you visit https://www.adamlasky.me for more resources
//
// ABOUT THE SCRIPT
// This script fetches keyword performance by CTR, cost, conversions, CPA, quality score, and conversion value
// then categorizes the keywords based on their relative performance as: 'over-performing', 'performing', 'under-performing'
// and recommends actions to be taken per keyword.
// 
// IMPORTANT NOTES
// Create a Google Sheet and insert the URL in the Customization Section below

// ---- Customization Section ----
var SPREADSHEET_URL = 'insert Google Sheet URL here'; // Update with your actual Google Sheet URL

var SETTINGS = {
  campaignNameContains: "insert campaign name here", // Specify part of the campaign name to include
  keywordScoreWeights: { // Weights for calculating the keyword score
    ctrWeight: 0.1,
    costWeight: 0.2,
    conversionsWeight: 0.2,
    qualityScoreWeight: 0.2 // Added weight for quality score
  },
  performanceThresholds: { // Customizable thresholds for performance labeling
    high: { qualityScore: 7, ctr: 5, conversions: 5 },
    low: { qualityScore: 5, conversions: 1 }
  }
};

function main() {
  var spreadsheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
  var allKeywordsSheet = getOrCreateSheet(spreadsheet, 'Sheet1');
  var exactSheet = getOrCreateSheet(spreadsheet, 'Exact Match');
  var phraseSheet = getOrCreateSheet(spreadsheet, 'Phrase Match');
  var broadSheet = getOrCreateSheet(spreadsheet, 'Broad Match');

  var headers = ['Campaign Name', 'Keyword', 'Match Type', 'Keyword Score', 'CTR', 'Cost', 'Conversions', 'Conversion Value', 'CPA', 'ROAS', 'Performance Label', 'Suggested Action'];
  clearAndSetHeaders(allKeywordsSheet, headers);
  clearAndSetHeaders(exactSheet, headers);
  clearAndSetHeaders(phraseSheet, headers);
  clearAndSetHeaders(broadSheet, headers);

  processCampaignKeywords(allKeywordsSheet, exactSheet, phraseSheet, broadSheet);
}

function getOrCreateSheet(spreadsheet, sheetName) {
  var sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
  } else {
    sheet.clear();
  }
  return sheet;
}

function clearAndSetHeaders(sheet, headers) {
  sheet.clear();
  sheet.appendRow(headers);
}

function processCampaignKeywords(allKeywordsSheet, exactSheet, phraseSheet, broadSheet) {
  var query = "SELECT CampaignName, Criteria, KeywordMatchType, Impressions, Clicks, Cost, Conversions, ConversionValue " +
              "FROM KEYWORDS_PERFORMANCE_REPORT " +
              "WHERE CampaignStatus = 'ENABLED' AND AdGroupStatus = 'ENABLED' AND Status = 'ENABLED' " +
              "AND CampaignName CONTAINS_IGNORE_CASE '" + SETTINGS.campaignNameContains + "' " +
              "DURING LAST_30_DAYS";

  var report = AdsApp.report(query);
  var rows = report.rows();
  while (rows.hasNext()) {
    var row = rows.next();
    var campaignName = row['CampaignName'];
    var keywordText = row['Criteria'];
    var matchType = row['KeywordMatchType'];
    var impressions = parseInt(row['Impressions'], 10);
    var clicks = parseInt(row['Clicks'], 10);
    var cost = parseFloat(row['Cost']);
    var conversions = parseInt(row['Conversions'], 10);
    var conversionValue = parseFloat(row['ConversionValue']);
    var ctr = (impressions > 0) ? (clicks / impressions * 100).toFixed(2) : 0;
    var cpa = (conversions > 0) ? (cost / conversions).toFixed(2) : 0;
    var roas = (cost > 0) ? (conversionValue / cost).toFixed(2) : 0;
    var keywordScore = calculateKeywordScore(ctr, cost, conversions, conversionValue);
    var performanceLabel = getPerformanceLabel(keywordScore, SETTINGS.performanceThresholds);
    var suggestedAction = getSuggestedAction(performanceLabel);

    var dataRow = [campaignName, keywordText, matchType, keywordScore, ctr + '%', cost.toFixed(2), conversions, conversionValue.toFixed(2), cpa, roas, performanceLabel, suggestedAction];
    appendRowToSheet(dataRow, matchType, allKeywordsSheet, exactSheet, phraseSheet, broadSheet);
  }
}

function appendRowToSheet(dataRow, matchType, allKeywordsSheet, exactSheet, phraseSheet, broadSheet) {
  allKeywordsSheet.appendRow(dataRow);
  switch (matchType) {
    case 'EXACT': exactSheet.appendRow(dataRow); break;
    case 'PHRASE': phraseSheet.appendRow(dataRow); break;
    case 'BROAD': broadSheet.appendRow(dataRow); break;
  }
}

function calculateKeywordScore(ctr, cost, conversions, conversionValue) {
  return SETTINGS.keywordScoreWeights.ctrWeight * ctr +
         SETTINGS.keywordScoreWeights.costWeight * cost +
         SETTINGS.keywordScoreWeights.conversionsWeight * conversions +
         SETTINGS.keywordScoreWeights.qualityScoreWeight * conversionValue; // Adjust weights and metrics as needed
}

function getPerformanceLabel(score, thresholds) {
  if (score >= thresholds.high) {
    return 'Over-performing';
  } else if (score <= thresholds.low) {
    return 'Under-performing';
  } else {
    return 'Performing';
  }
}

function getSuggestedAction(performanceLabel) {
  if (performanceLabel === 'Over-performing') {
    return "Expand targeting and increase budget for high-performing keywords.";
  } else if (performanceLabel === 'Under-performing') {
    return "Reduce bids or pause under-performing keywords.";
  } else {
    return "Continue to monitor and optimize.";
  }
}

