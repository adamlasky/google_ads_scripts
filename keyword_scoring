// Copyright 2024. Adam Lasky. All Rights Reserved.
// Keyword Scoring Script
// Have custom requests? Email me at adam@adamlasky.me
//
// v2 
//
// -- Make sure you visit https://www.adamlasky.me for more resources
//
// ABOUT THE SCRIPT
// This script fetches keyword performance by CTR, cost, conversions, CPA, and quality score   
// then categorizes the keywords based on their relative performance as: 'over-performing', 'performing', 'under-performing'
// and recommends actions to be taken per keyword.
// 
// IMPORTANT NOTES
// Create a Google Sheet and insert the URL in the Customization Section below

// ---- Customization Section ----
var SPREADSHEET_URL = 'insert your spreadsheet URL here'; // Update with your actual Google Sheet URL

var SETTINGS = {
  campaignNameContains: "insert your campaign name here", // Specify part of the campaign name to include
  keywordScoreWeights: { // Weights for calculating the keyword score
    ctrWeight: 0.1,
    costWeight: 0.2,
    conversionsWeight: 0.2,
    qualityScoreWeight: 0.2 // Added weight for quality score
  },
  performanceThresholds: { // Customizable thresholds for performance labeling
    high: { qualityScore: 7, ctr: 5, conversions: 5 },
    low: { qualityScore: 5, conversions: 1 }
  }
};

// ---- Script Starts Below ----
function main() {
  var spreadsheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
  
  var allKeywordsSheet = getOrCreateSheet(spreadsheet, 'Sheet1');
  var exactSheet = getOrCreateSheet(spreadsheet, 'Exact Match');
  var phraseSheet = getOrCreateSheet(spreadsheet, 'Phrase Match');
  var broadSheet = getOrCreateSheet(spreadsheet, 'Broad Match');

  var headers = ['Campaign Name', 'Keyword', 'Match Type', 'Keyword Score', 'CTR', 'Cost', 'Conversions', 'CPA', 'Performance Label', 'Suggested Action'];
  clearAndSetHeaders(allKeywordsSheet, headers);
  clearAndSetHeaders(exactSheet, headers);
  clearAndSetHeaders(phraseSheet, headers);
  clearAndSetHeaders(broadSheet, headers);

  processCampaignKeywords(allKeywordsSheet, exactSheet, phraseSheet, broadSheet);
}

function getOrCreateSheet(spreadsheet, sheetName) {
  var sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
  } else {
    sheet.clear();
  }
  return sheet;
}

function clearAndSetHeaders(sheet, headers) {
  sheet.clear();
  sheet.appendRow(headers);
}

function processCampaignKeywords(allKeywordsSheet, exactSheet, phraseSheet, broadSheet) {
  var processedKeywords = new Set();

  var campaignIterator = AdsApp.campaigns()
    .withCondition('Name CONTAINS_IGNORE_CASE "' + SETTINGS.campaignNameContains + '"')
    .withCondition("Status = ENABLED")  // Only fetch enabled campaigns
    .forDateRange("LAST_30_DAYS")
    .get();

  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var campaignName = campaign.getName();  // Use full campaign name
    var biddingStrategy = campaign.getBiddingStrategyType();  // Get the bidding strategy type of the campaign

    var keywordIterator = campaign.keywords()
      .withCondition("Status = ENABLED")  // Ensures only enabled keywords are processed
      .orderBy('QualityScore DESC')
      .forDateRange("LAST_30_DAYS")
      .get();

    while (keywordIterator.hasNext()) {
      var keyword = keywordIterator.next();
      var stats = keyword.getStatsFor("LAST_30_DAYS");
      var keywordText = keyword.getText();
      var matchType = keyword.getMatchType();
      var keywordScore = calculateKeywordScore(keyword, stats);
      var ctr = (stats.getImpressions() > 0) ? (stats.getClicks() / stats.getImpressions()) * 100 : 0;
      var cost = stats.getCost();
      var conversions = stats.getConversions();
      var cpa = conversions > 0 ? cost / conversions : 0;
      var performanceLabel = getPerformanceLabel(keywordScore, keyword.getQualityScore(), ctr, conversions);
      var suggestedAction = getSuggestedAction(keyword.getQualityScore(), ctr, conversions, biddingStrategy);  // Pass bidding strategy here

      var uniqueId = campaignName + '|' + keywordText;
      if (!processedKeywords.has(uniqueId)) {
        processedKeywords.add(uniqueId);
        var dataRow = [campaignName, keywordText, matchType, keywordScore.toFixed(2), ctr.toFixed(2) + '%', cost.toFixed(2), conversions, cpa.toFixed(2), performanceLabel, suggestedAction];

        // Append dataRow to the appropriate sheet based on match type
        appendRowToSheet(dataRow, matchType, allKeywordsSheet, exactSheet, phraseSheet, broadSheet);
      }
    }
  }
}


function appendRowToSheet(dataRow, matchType, allKeywordsSheet, exactSheet, phraseSheet, broadSheet) {
  allKeywordsSheet.appendRow(dataRow);
  switch (matchType) {
    case 'EXACT': exactSheet.appendRow(dataRow); break;
    case 'PHRASE': phraseSheet.appendRow(dataRow); break;
    case 'BROAD': broadSheet.appendRow(dataRow); break;
  }
}

function calculateKeywordScore(keyword, stats) {
    var clicks = parseFloat(stats.clicks) || 0;
    var impressions = parseFloat(stats.impressions) || 0;
    var cost = parseFloat(stats.cost) || 0;
    var conversions = parseFloat(stats.conversions) || 0;
    var qualityScore = keyword.getQualityScore() || 0;

    var ctr = impressions > 0 ? (clicks / impressions) * 100 : 0;

    var score = (ctr * SETTINGS.keywordScoreWeights.ctrWeight) +
                ((100 - cost) * SETTINGS.keywordScoreWeights.costWeight) +
                (conversions * SETTINGS.keywordScoreWeights.conversionsWeight) +
                (qualityScore * SETTINGS.keywordScoreWeights.qualityScoreWeight);

    return score;
}

function getPerformanceLabel(score, qualityScore, ctr, conversions) {
  var thresholds = SETTINGS.performanceThresholds;
  if (qualityScore >= thresholds.high.qualityScore && ctr >= thresholds.high.ctr && conversions >= thresholds.high.conversions) {
    return 'Over-performing';
  } else if (qualityScore <= thresholds.low.qualityScore && conversions <= thresholds.low.conversions) {
    return 'Under-performing';
  } else {
    return 'Performing';
  }
}

function getSuggestedAction(qualityScore, ctr, conversions, biddingStrategy) {
  var action = "";
  if (biddingStrategy.includes("Maximize Conversions") || biddingStrategy.includes("Maximize Conversion Value")) {
    // Actions specific to smart bidding strategies
    action += "Note: Cannot adjust bids directly due to smart bidding strategy. Focus on improving ad quality and expanding target audiences.";
  }
  
  if (qualityScore >= SETTINGS.performanceThresholds.high.qualityScore && ctr >= SETTINGS.performanceThresholds.high.ctr && conversions >= SETTINGS.performanceThresholds.high.conversions) {
    action += " Consider narrowing match type for increased relevance. Create a separate campaign for this keyword for better budget control.";
  } else if (qualityScore <= SETTINGS.performanceThresholds.low.qualityScore && conversions <= SETTINGS.performanceThresholds.low.conversions) {
    action += " Experiment with broader match types to capture wider audience. Group underperforming keywords separately for targeted improvement testing.";
  } else {
    action += " Monitor and optimize creative & landing pages. Check search terms report for new keyword opportunities.";
  }
  return action;
}
